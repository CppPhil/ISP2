#pragma once
#include "../deps/genann/genann.h" // genann, ...
#include <pl/noncopyable.hpp>      // PL_NONCOPYABLE
#include <tl/expected.hpp>         // tl::expected
#include <vector>                  // std::vector

namespace isp2 {
/*!
 * \brief Type to represent a neural network.
 **/
class NeuralNetwork {
public:
    PL_NONCOPYABLE(NeuralNetwork);

    /*!
     * \brief Scoped enum that defines enumerators
     *        used as error codes by the neural network.
     **/
    enum class [[nodiscard]] Error{
        InvalidInputVectorSize,  /*!< Indicates that a given input vector was of
                                  *   invalid size
                                  **/
        InvalidOutputVectorSize, /*!< Indicates that a given output vector was
                                  *   of invalid size
                                  **/
        NoError                  /*!< Indicates that no error has occurred */
    };

    /*!
     * \brief Creates a NeuralNetwork
     * \param inputs The amount of neurons in the input layer.
     * \param hiddenLayers The amount of hidden layers.
     * \param hidden The amount of neurons in each hidden layer.
     * \param outputs The amount of neurons in the output layer.
     * \param learningRate The learning rate to use.
     * \param activationFunction The activation function to use.
     * \throws std::bad_alloc if allocating the memory for the neural network
     *                        failed.
     **/
    NeuralNetwork(
        int           inputs,
        int           hiddenLayers,
        int           hidden,
        int           outputs,
        double        learningRate,
        genann_actfun activationFunction);

    /*!
     * \brief Deallocates the memory occupied by the neural network.
     **/
    ~NeuralNetwork();

    /*!
     * \brief Does a single backpropagation update.
     * \param inputs The input vector.
     * \param desiredOutputs The desired output vector associated with the input
     *                       vector.
     * \return NoError unless one of the arguments supplied was invalid.
     **/
    Error train(
        const std::vector<double>& inputs,
        const std::vector<double>& desiredOutputs);

    /*!
     * \brief Runs the feedforward algorithm to calculate the neural network's
     *        output.
     * \param inputs The input vector to use.
     * \return The output vector generated by the neural network for the
     *         input given or an error if an error occurred.
     **/
    [[nodiscard]] tl::expected<std::vector<double>, Error> run(
        const std::vector<double>& inputs);

private:
    int     m_inputs;       /*!< Amount of neurons in the input layer */
    int     m_hiddenLayers; /*!< Amount of hidden layers */
    int     m_hidden;       /*!< Amount of neurons in each hidden layer */
    int     m_outputs;      /*!< Amount of neurons in the output layer */
    double  m_learningRate; /*!< The learning rate */
    genann* m_genann;       /*!< Pointer to the neural network implementation */
};
} // namespace isp2
